<style>
    .dashboard-container {
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 1px 4px 20px rgba(0, 0, 0, 0.301);
        margin: 20px auto;
        padding: 20px;
        width: 80%;
    }

    .dashboard-title {
        margin-bottom: 20px;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .date-form {
        display: flex;
        gap: 10px;
    }

    .filter-button {
        background-color: #0f6b35;
        border: none;
        border-radius: 5px;
        color: white;
        cursor: pointer;
        padding: 8px 15px;
        transition: background-color 0.3s;
    }

    .filter-button:hover {
        background-color: #094723;
    }

    #view-all,
    #view-detailed {
        background-color: #0f6b35;
        border: none;
        border-radius: 5px;
        color: white;
        cursor: pointer;
        padding: 8px 15px;
        transition: background-color 0.3s;
    }

    #view-all:hover,
    #view-detailed:hover {
        background-color: #094723;
    }

    .active-view {
        background-color: #094723 !important;
    }

    .scrollable-table {
        display: flex;
        flex-direction: column;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin-top: 10px;
    }

    .data-table {
        max-height: calc(100vh - 200px);
        overflow-y: auto;
        border: 1px solid #ddd;
        border-top: none;
        font-size: 15px;
    }

    .data-table table {
        width: 100%;
        table-layout: fixed;
        border-collapse: collapse;
    }

    .data-table thead th {
        text-align: left;
        font-weight: bold;
        padding: 8px;
        border: 1px solid #ddd;
    }

    .data-table tbody td {
        text-align: left;
        padding: 8px;
        border: 1px solid #ddd;
    }

    .print-button {
        background-color: #6c757d;
        color: white;
        cursor: pointer;
        border: none;
        border-radius: 5px;
        padding: 8px 15px;
        transition: background-color 0.3s;
    }

    .print-button:hover {
        background-color: #5a6268;
    }


    .repasse-button,
    .comprovante-button {
        background-color: #6c757d;
        color: white;
        cursor: pointer;
        border: none;
        border-radius: 5px;
        padding: 5px;
        box-shadow: black 1px 1px 1px;
        transition: background-color 0.3s;
    }

    .repasse-button:hover,
    .comprovante-button:hover {
        background-color: #5a6268;
    }

    .modal-alerts-dashboard {
        position: fixed;
        bottom: 50px;
        right: 50px;
        z-index: 1050;
        font-family: 'Sarala'
    }

    .modal-alert-dashboard {
        width: 300px;
        margin-bottom: 50px;
    }

    @media screen and (max-width: 768px) {
        .dashboard-container {
            width: 90%;
        }
    }

    .loading-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
        justify-content: center;
        align-items: center;
    }

    .loading-modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 5px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .spinner {
        border: 5px solid rgba(0, 0, 0, 0.1);
        border-top: 5px solid #333;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        margin-bottom: 10px;
    }

    @keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .custom-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        top: 35%;
        left: 35%;
        border-radius: 5px;
        width: 60%;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .custom-modal button {
        margin: 10px;
        padding: 5px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
</style>
<div class="loading-modal">
    <div class="loading-modal-content">
        <div class="spinner"></div>
        <p>Carregando...</p>
    </div>
</div>
@include('components/filtro')
<div class="dashboard-container">
    <h3 class="dashboard-title">Dashboard Use</h3>
    <div class="dashboard-header">
        <form method="post" class="date-form">
            <input type="date" name="startDate" id="data-inicial" class="date-input" placeholder="Data de início">
            <input type="date" name="endDate" id="data-final" class="date-input" placeholder="Data de término">
            <button type="button" class="filter-button">Filtrar</button>
            <h6 class="info">Selecione o período a ser buscado!</h6>
            <div class="print-button-container">
                <button type="button" id="imprimir" class="print-button" data-mode="total">Imprimir</button>
            </div>
        </form>
        <div class="view-buttons">
            <span id="filtro" style="cursor:pointer; display:none"><i class="fa-solid fa-filter fa-2xl"></i></span>
            <button id="view-all" class="view-button active-view">Todos</button>
            <button id="view-detailed" class="view-button">Detalhado</button>
        </div>
    </div>
    <fieldset class="data-fieldset">
        <div id="customModal" class="custom-modal">
            <div class="modal-content">
                <p>Deseja realmente solicitar o repasse?</p>
                <button id="confirmButton">Confirmar</button>
                <button id="cancelButton">Cancelar</button>
            </div>
        </div>

        <div class="scrollable-table">
            <div class="data-table" id="data-table">
                <table id="transacoes" data-transacoes="[]">
                    <thead class="header-transacoes">
                        <tr></tr>
                    </thead>
                    <tbody class="data-transacoes">
                    </tbody>
                </table>
            </div>
        </div>
    </fieldset>
    <div class="modal-alerts-dashboard"></div>
</div>
<script>
    var fetchedData = []; // Armazenar os dados obtidos da API
    function atualizarPagina(filtrado) {
        document.querySelector(".print-button-container").style.display = filtrado ? "block" : "none";
        document.querySelector(".view-buttons").style.display = filtrado ? "block" : "none";
        document.querySelector(".data-fieldset").style.display = filtrado ? "block" : "none";
        document.querySelector(".info").style.display = filtrado ? "none" : "block";
    }

    function updateTableContent(headers) {
        return headers.map(header => `<th>${header}</th>`).join('');
    }

    async function fetchTransacoes(filtro, dataInicial, dataFinal) {
        try {
            const url = filtro !== 'USE' ? `/api/mesh/transacao/${dataInicial}/${dataFinal}` : `/api/use/transacao/${dataInicial}/${dataFinal}`;
            const response = await fetch(url, {
                method: 'POST',
            });

            if (!response.ok) {
                throw new Error('Erro na requisição');
            }

            atualizarPagina(true)
            const estabelecimentos = await response.json();
            return estabelecimentos;
        } catch (error) {
            const modalAlerts = document.querySelector(".modal-alerts-dashboard");
            const alert = document.createElement("div");
            alert.classList.add("alert", "alert-danger", "modal-alert-dashboard");
            alert.setAttribute("role", "alert");

            alert.innerText = "Erro ao buscar transações!"

            modalAlerts.appendChild(alert);

            setTimeout(() => {
                modalAlerts.removeChild(alert);
            }, 2000);
            return [];
        }
    }

    function exibirComprovante(transacaoData) {
        const existingModal = document.getElementById("comprovanteModal");
if (existingModal) {
    existingModal.remove();
}

        const modalContent = `
    <style>
    body {
      font-family: Arial, sans-serif;
    }
    .receipt {
      border: 2px solid #333;
      padding: 20px;
      width: 300px;
      margin: 0 auto;
    }
    .receipt-header {
      text-align: center;
      margin-bottom: 10px;
    }
    .receipt-info {
      margin-bottom: 20px;
    }
    .receipt-details {
      font-size: 14px;
    }
    .receipt-details span {
      font-weight: bold;
    }
    .thank-you {
      text-align: center;
      margin-top: 20px;
    }
  </style>
<div class="modal fade" id="comprovanteModal" tabindex="-1" aria-labelledby="comprovanteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="comprovanteModalLabel">Comprovante de Pagamento</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="comprovante-header">
                    
                </div>
                <hr style="width:100%">
                <div class="comprovante-details">
                    <div class="receipt">
                        <div class="receipt-header">
                        <h3>Comprovante de Pagamento</h3>
                        </div>
                        <div class="receipt-info">
                         <img src="/img/logo-verde.png" alt="Logo Pax Primavera" style="heigth:60px; width:80px">
                        <p><b>Dados do vendedor</b></p>
                        <p><span>Pax Primavera ${transacaoData.cnpj}</span></p>
                        </div>
                        <div class="receipt-details">
                        <p><b>Detalhes do Pagamento</b></p>
                        <p>${transacaoData.transacoes.data} ${transacaoData.transacoes.hora}</p>
                        <p> R$ ${transacaoData.transacoes.total}  ${transacaoData.transacoes.forma_pagamento}</p>
                        <p>Portador: ${transacaoData.transacoes.cliente}</p>
                        <p>Número do Cartão: **** **** **** ${transacaoData.transacoes.ultimos_digitos}</p>
                        <p>Transação: ${transacaoData.transacoes.id}</p>
                        </div>
                    </div>
                </div>
                <hr style="width:100%">
                <div class="comprovante-footer">
                  
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>
`;

        // Insira o modal no documento
        const modalContainer = document.createElement("div");
        modalContainer.innerHTML = modalContent;
        document.body.appendChild(modalContainer);

        // Abra o modal
        const comprovanteModal = new bootstrap.Modal(document.getElementById("comprovanteModal"));
        comprovanteModal.show();
    }

    const customModal = document.getElementById("customModal");
    const confirmButton = document.getElementById("confirmButton");
    const cancelButton = document.getElementById("cancelButton");

    function callBackendFunction(cnpj) {
        customModal.style.display = "block";

        confirmButton.addEventListener("click", () => {
            customModal.style.display = "none";
            // Realizar a ação após a confirmação
            // fetch('/repasse', {...})
        });

        cancelButton.addEventListener("click", () => {
            customModal.style.display = "none";
        });
    }


    document.addEventListener("DOMContentLoaded", function () {

        document.getElementById("data-inicial").value = new Date().toISOString().slice(0, 10)
        document.getElementById("data-final").value = new Date().toISOString().slice(0, 10)
        const btnFiltrar = document.getElementById("filtro");
        const modalFiltro = new bootstrap.Modal(document.getElementById("modalFiltro"));
        const tituloModal = document.querySelector("#modalFiltro .modal-title");
        const filtro = document.querySelector(".dashboard-title");
        const buttonFiltro = document.querySelector(".filter-button");
        const allButton = document.getElementById("view-all");
        const detailedButton = document.getElementById("view-detailed");
        const dataTable = document.getElementById("data-table");
        const btnfiltrarTransacoes = document.getElementById("filtrarTransacoes")
        const btnLimparFiltro = document.getElementById("limparFiltro")
        const btnImprimirTransacoes = document.getElementById("imprimir")

        filtro.innerHTML = filtro.getAttribute("data-dashboard") !== 'USE' ? 'Dashboard Zoop' : "Dashboard Use";

        atualizarPagina(false);

        btnFiltrar.addEventListener("click", () => {
            const selectElement = document.querySelector('.filtro-estabelecimento');
            const selectElementTipo = document.querySelector('.filtro-tipo');
            const selectElementTerminal = document.querySelector('.filtro-terminal');
            if (filtro.getAttribute("data-dashboard") !== "USE") {
                document.getElementById("hora-inicial").style.display = "inline"
                document.getElementById("hora-final").style.display = "inline"
                document.getElementById("valor-inicial").style.display = "inline"
                document.getElementById("valor-final").style.display = "inline"
                document.getElementById("cliente").style.display = "inline"
                document.getElementById("contrato").style.display = "none"
                document.getElementById("cartao").style.display = "inline"
                document.getElementById("filtro-tipo").style.display = "inline"
                document.getElementById("filtro-estabelecimento").style.display = "inline"
                document.getElementById("filtro-terminal").style.display = "inline"

            } else {
                document.getElementById("hora-inicial").style.display = "none"
                document.getElementById("hora-final").style.display = "none"
                document.getElementById("valor-inicial").style.display = "inline"
                document.getElementById("valor-final").style.display = "inline"
                document.getElementById("cliente").style.display = "inline"
                document.getElementById("contrato").style.display = "inline"
                document.getElementById("cartao").style.display = "none"
                document.getElementById("filtro-tipo").style.display = "inline"
                document.getElementById("filtro-estabelecimento").style.display = "inline"


                $('.filtro-terminal').removeClass('select2-hidden-accessible');
                $('.filtro-terminal').removeClass('select2-offscreen');
                $('.filtro-terminal').removeClass('select2');
                $('.filtro-terminal').removeAttr('aria-hidden');
                $('.filtro-terminal').removeAttr('data-select2-id');
                $('.filtro-terminal').next('.select2-container').remove();
                document.getElementById("filtro-terminal").style.display = "none"

            }
            selectElement.innerHTML = "";
            selectElementTipo.innerHTML = "";
            selectElementTerminal.innerHTML = "";
            let formaPagamento = new Set();
            let terminal = new Set()
            fetchedData.forEach(estabelecimento => {
                const option = document.createElement('option');
                option.value = estabelecimento.estabelecimento;
                option.text = `${estabelecimento.estabelecimento} - CNPJ: ${estabelecimento.cnpj}`;
                selectElement.appendChild(option);
                estabelecimento.saldo.transacoes.forEach(item => {
                    formaPagamento.add(item.forma_pagamento)
                    terminal.add(item.terminal)
                })
            });

            new Set(formaPagamento).forEach(item => {
                const optionTipo = document.createElement('option');
                optionTipo.value = item;
                optionTipo.text = item;
                selectElementTipo.appendChild(optionTipo);
            })


            if (filtro.getAttribute("data-dashboard") !== "USE") {
                new Set(terminal).forEach(item => {
                    const optionTerminal = document.createElement('option');
                    optionTerminal.value = item;
                    optionTerminal.text = item;
                    selectElementTerminal.appendChild(optionTerminal);
                })
            }

            const tituloModalSelecionado = "Filtrar transações";
            tituloModal.textContent = tituloModalSelecionado;
            modalFiltro.show();
        });

        buttonFiltro.addEventListener("click", async () => {
            const modalAlerts = document.querySelector(".modal-alerts-dashboard");
            const alert = document.createElement("div");
            let dataInicial = document.getElementById('data-inicial').value
            let dataFinal = document.getElementById('data-final').value

            if ((dataInicial && dataFinal) && (dataFinal >= dataInicial)) {
                const loadingModal = document.querySelector(".loading-modal");
                loadingModal.style.display = "flex";
                fetchedData = await fetchTransacoes(filtro.getAttribute("data-dashboard"), dataInicial, dataFinal);
                loadingModal.style.display = "none";
                buscarTransacoes("total");
            } else {
                alert.classList.add("alert", "alert-danger", "modal-alert-dashboard");
                alert.setAttribute("role", "alert");

                alert.innerText = "O período informado é inválido"

                modalAlerts.appendChild(alert);

                setTimeout(() => {
                    modalAlerts.removeChild(alert);
                }, 2000);
            }
        });

        allButton.addEventListener("click", () => {
            buscarTransacoes("total");
            btnFiltrar.style.display = "none"
            allButton.classList.add("active-view");
            detailedButton.classList.remove("active-view");
            btnImprimirTransacoes.setAttribute("data-mode", "total")
        });

        detailedButton.addEventListener("click", () => {
            buscarTransacoes("detailed");
            btnFiltrar.style.display = "inline"
            detailedButton.classList.add("active-view");
            allButton.classList.remove("active-view");
            btnImprimirTransacoes.setAttribute("data-mode", "detailed")
        });

        btnLimparFiltro.addEventListener('click', () => {

            document.getElementById("hora-inicial").value = "";
            document.getElementById("hora-final").value = "";
            document.getElementById("valor-inicial").value = "";
            document.getElementById("valor-final").value = "";
            document.getElementById("cliente").value = "";
            document.getElementById("contrato").value = "";
            document.getElementById("cartao").value = "";

            // Limpe as seleções dos elementos select2
            $('.filtro-estabelecimento').val(null).trigger('change');
            $('.filtro-tipo').val(null).trigger('change');
            $('.filtro-terminal').val(null).trigger('change');

            buscarTransacoes('detailed')
        })

        btnfiltrarTransacoes.addEventListener("click", () => { buscarTransacoes('detailed') })

        btnImprimirTransacoes.addEventListener("click", () => { imprimir(btnImprimirTransacoes.getAttribute("data-mode")) })

        document.querySelector(".data-transacoes").addEventListener("click", function (event) {
            if (event.target.classList.contains("comprovante-button")) {
                const transacaoData = JSON.parse(event.target.getAttribute("data-transacao"));
                exibirComprovante(transacaoData);
            }
        });

        function buscarTransacoes(viewMode) {
            const dataTransacoes = document.querySelector(".data-transacoes");
            dataTransacoes.innerHTML = '';
            const newRowCabecalho = document.createElement("tr");
            if (viewMode === "total") {
                newRowCabecalho.innerHTML = filtro.getAttribute("data-dashboard") !== 'USE'
                    ? `<th>Estabelecimento</th><th>Cnpj</th><th>Saldo</th><th>Quant.</th><th>Total Pago</th><th>Total Taxa</th>`
                    : `<th>Estabelecimento</th><th>Cnpj</th><th>Saldo</th><th>Quant.</th><th>Total Pago</th><th>Total Taxa</th><th>Ação</th>`;
            } else {
                newRowCabecalho.innerHTML = filtro.getAttribute("data-dashboard") !== 'USE'
                    ? `<th>Estabelecimento</th><th>Data/Hora</th><th>Tipo</th><th>Valor</th><th>Taxa</th><th>Terminal</th><th>Cliente</th><th>Cartão</th>`
                    : `<th>Estabelecimento</th><th>Cliente</th><th>Valor Boleto</th><th>N. Pedido</th><th>Contrato</th><th>Data Doc.</th><th>Data Venc.</th><th>Data Pag.</th><th>Tipo Pag.</th><th>Valor Pago</th><th>Valor Taxa</th>`;
            }
            dataTransacoes.appendChild(newRowCabecalho);

            let horaInicial = document.getElementById("hora-inicial").value
            let horaFinal = document.getElementById("hora-final").value
            let valorInicial = document.getElementById("valor-inicial").value
            let valorFinal = document.getElementById("valor-final").value
            let cliente = document.getElementById("cliente").value
            let contrato = document.getElementById("contrato").value
            let cartao = document.getElementById("cartao").value
            let filtroTipo = Array.from(document.querySelectorAll('.filtro-tipo option:checked')).map(option => option.value)
            let filtroEstabelecimento = Array.from(document.querySelectorAll('.filtro-estabelecimento option:checked')).map(option => option.value)
            let filtroTerminal = Array.from(document.querySelectorAll('.filtro-terminal option:checked')).map(option => option.value)

            fetchedData.forEach(item => {
                const newRow = document.createElement("tr");
                if (viewMode === "total") {
                    newRow.innerHTML = filtro.getAttribute("data-dashboard") !== 'USE'
                        ? `<td>${item.estabelecimento}</td><td>${item.cnpj}</td><td>${item.saldo.saldo}</td><td>${item.saldo.quantidade}</td><td>${item.saldo.total}</td><td>${item.saldo.tarifa}</td>`
                        : `<td>${item.estabelecimento}</td><td>${item.cnpj}</td><td>${item.saldo.saldo}</td><td>${item.saldo.quantidade}</td><td>${item.saldo.total}</td><td>${item.saldo.tarifa}</td><td><button onclick="callBackendFunction('${item.cnpj}')" class="repasse-button">Solicitar Repasse</button>`
                } else if (viewMode === "detailed") {
                    item.saldo.transacoes.forEach(transacao => {
                        const newTransacaoRow = document.createElement("tr");

                        const isFiltered =
                            (!horaInicial || (transacao.hora >= horaInicial)) &&
                            (!horaFinal || (transacao.hora <= horaFinal)) &&
                            (!valorInicial || (parseFloat(transacao.total) >= parseFloat(valorInicial))) &&
                            (!valorFinal || (parseFloat(transacao.total) <= parseFloat(valorFinal))) &&
                            (!cliente || (transacao.cliente.toLowerCase().includes(cliente.toLowerCase()))) &&
                            (!contrato || (transacao.observacao.toLowerCase().includes(contrato.toLowerCase()))) &&
                            (!cartao || (transacao.primeiros_digitos.toLowerCase().includes(cartao.toLowerCase())) || (transacao.ultimos_digitos.toLowerCase().includes(cartao.toLowerCase()))) &&
                            (filtroTipo.length === 0 || filtroTipo.includes(transacao.forma_pagamento)) &&
                            (filtroEstabelecimento.length === 0 || filtroEstabelecimento.includes(item.estabelecimento)) &&
                            (filtroTerminal.length === 0 || filtroTerminal.includes(transacao.terminal));
                        if (filtro.getAttribute("data-dashboard") !== 'USE' && isFiltered) {
                            newTransacaoRow.innerHTML = `<td>${item.estabelecimento}</td><td>${transacao.data} ${transacao.hora}</td><td>${transacao.forma_pagamento}</td><td>${transacao.total}</td><td>${transacao.taxa}</td><td>${transacao.terminal}</td><td>${transacao.cliente}</td> <td>${transacao.primeiros_digitos}*******${transacao.ultimos_digitos}</td><td><button class="comprovante-button" data-transacao='${JSON.stringify({...item, transacoes: transacao})}'>Comprovante</button></td>`;
                        } else if (isFiltered) {
                            newTransacaoRow.innerHTML = `<td>${item.estabelecimento}</td><td>${transacao.cliente}</td><td>${transacao.valor_boleto}</td><td>${transacao.pedido}</td><td>${transacao.observacao}</td><td>${transacao.data_documento}</td><td>${transacao.data_vencimento}</td><td>${transacao.data_pagamento}</td><td>${transacao.forma_pagamento}</td><td>${transacao.total}</td><td>${transacao.taxa}</td>`;
                        }

                        if (isFiltered) {
                            dataTransacoes.appendChild(newTransacaoRow);
                        }
                    });
                }

                dataTransacoes.appendChild(newRow);
            });
            document.getElementById("transacoes").setAttribute("data-transacoes", fetchedData)
        }

        function imprimir(viewMode) {

            let dataInitial = document.getElementById('data-inicial').value.split('-')
            let dataFinal = document.getElementById('data-final').value.split('-')
            let dateInitialFormatted = dataInitial[2] + '/' + dataInitial[1] + '/' + dataInitial[0]
            let dateFinalFormatted = dataFinal[2] + '/' + dataFinal[1] + '/' + dataFinal[0]
            let printContent = '<h5>Data Inicial: ' + dateInitialFormatted + ' - Data Final: ' + dateFinalFormatted + '</h5>';
            printContent += '<table class="print-table">';
            printContent += '<thead>';
            let newRowCabecalho = "<tr>";
            if (viewMode === "total") {
                newRowCabecalho += filtro.getAttribute("data-dashboard") !== 'USE'
                    ? `<th>Estabelecimento</th><th>Cnpj</th><th>Saldo</th><th>Quant.</th><th>Total Pago</th><th>Total Taxa</th>`
                    : `<th>Estabelecimento</th><th>Cnpj</th><th>Saldo</th><th>Quant.</th><th>Total Pago</th><th>Total Taxa</th><th>Ação</th>`;
            } else {
                newRowCabecalho += filtro.getAttribute("data-dashboard") !== 'USE'
                    ? `<th>Estabelecimento</th><th>Data/Hora</th><th>Tipo</th><th>Valor</th><th>Taxa</th><th>Terminal</th><th>Cliente</th><th>Cartão</th>`
                    : `<th>Estabelecimento</th><th>Cliente</th><th>Valor Boleto</th><th>N. Pedido</th><th>Contrato</th><th>Data Doc.</th><th>Data Venc.</th><th>Data Pag.</th><th>Tipo Pag.</th><th>Valor Pago</th><th>Valor Taxa</th>`;
            }
            printContent += newRowCabecalho;
            printContent += '</tr></thead>'

            let horaInicial = document.getElementById("hora-inicial").value
            let horaFinal = document.getElementById("hora-final").value
            let valorInicial = document.getElementById("valor-inicial").value
            let valorFinal = document.getElementById("valor-final").value
            let cliente = document.getElementById("cliente").value
            let contrato = document.getElementById("contrato").value
            let cartao = document.getElementById("cartao").value
            let filtroTipo = Array.from(document.querySelectorAll('.filtro-tipo option:checked')).map(option => option.value)
            let filtroEstabelecimento = Array.from(document.querySelectorAll('.filtro-estabelecimento option:checked')).map(option => option.value)
            let filtroTerminal = Array.from(document.querySelectorAll('.filtro-terminal option:checked')).map(option => option.value)
            printContent += '<tbody>'
            fetchedData.forEach(item => {

                if (viewMode === "total") {
                    let newRow = "<tr>";
                    newRow += filtro.getAttribute("data-dashboard") !== 'USE'
                        ? `<td>${item.estabelecimento}</td><td>${item.cnpj}</td><td>${item.saldo.saldo}</td><td>${item.saldo.quantidade}</td><td>${item.saldo.total}</td><td>${item.saldo.tarifa}</td>`
                        : `<td>${item.estabelecimento}</td><td>${item.cnpj}</td><td>${item.saldo.saldo}</td><td>${item.saldo.quantidade}</td><td>${item.saldo.total}</td><td>${item.saldo.tarifa}</td><td><button class="repasse-button">Solicitar Repasse</button>`
                    printContent += newRow;
                    printContent += "</tr>"
                } else if (viewMode === "detailed") {
                    item.saldo.transacoes.forEach(transacao => {
                        let newTransacaoRow = "<tr>";
                        const isFiltered =
                            (!horaInicial || (transacao.hora >= horaInicial)) &&
                            (!horaFinal || (transacao.hora <= horaFinal)) &&
                            (!valorInicial || (parseFloat(transacao.total) >= parseFloat(valorInicial))) &&
                            (!valorFinal || (parseFloat(transacao.total) <= parseFloat(valorFinal))) &&
                            (!cliente || (transacao.cliente.toLowerCase().includes(cliente.toLowerCase()))) &&
                            (!contrato || (transacao.observacao.toLowerCase().includes(contrato.toLowerCase()))) &&
                            (!cartao || (transacao.primeiros_digitos.toLowerCase().includes(cartao.toLowerCase())) || (transacao.ultimos_digitos.toLowerCase().includes(cartao.toLowerCase()))) &&
                            (filtroTipo.length === 0 || filtroTipo.includes(transacao.forma_pagamento)) &&
                            (filtroEstabelecimento.length === 0 || filtroEstabelecimento.includes(item.estabelecimento)) &&
                            (filtroTerminal.length === 0 || filtroTerminal.includes(transacao.terminal));
                        if (filtro.getAttribute("data-dashboard") !== 'USE' && isFiltered) {
                            newTransacaoRow += `<td>${item.estabelecimento}</td><td>${transacao.data} ${transacao.hora}</td><td>${transacao.forma_pagamento}</td><td>${transacao.total}</td><td>${transacao.taxa}</td><td>${transacao.terminal}</td><td>${transacao.cliente}</td> <td>${transacao.primeiros_digitos}*******${transacao.ultimos_digitos}</td>`;
                        } else if (isFiltered) {
                            newTransacaoRow += `<td>${item.estabelecimento}</td><td>${transacao.cliente}</td><td>${transacao.valor_boleto}</td><td>${transacao.pedido}</td><td>${transacao.observacao}</td><td>${transacao.data_documento}</td><td>${transacao.data_vencimento}</td><td>${transacao.data_pagamento}</td><td>${transacao.forma_pagamento}</td><td>${transacao.total}</td><td>${transacao.taxa}</td>`;
                        }

                        if (isFiltered) {
                            printContent += newTransacaoRow;
                            printContent += "</tr>";
                        }

                    });
                }


            });
            printContent += '</tbody></table>'
            var printWindow = window.open('', '_blank');
            printWindow.document.open();
            printWindow.document.write('<html><head><title>Relatório Zoop</title>');
            printWindow.document.write('<style>');
            printWindow.document.write('.print-table { border-collapse: collapse; }');
            printWindow.document.write('.print-table th, .print-table td { border: 1px solid black; padding: 5px; }');
            printWindow.document.write('</style>');
            printWindow.document.write('</head><body>');
            printWindow.document.write(printContent);
            printWindow.document.write('</body></html>');
            printWindow.document.close();

            printWindow.print();

        }
    });
</script>